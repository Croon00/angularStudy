{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport let CockpitComponent = /*#__PURE__*/(() => {\n  class CockpitComponent {\n    constructor() {\n      this.serverCreated = new EventEmitter();\n      this.blueprintCreated = new EventEmitter();\n      this.newServerName = \"\";\n      this.newServerContent = \"\";\n    }\n    ngOnInit() {}\n    onAddServer() {\n      this.serverCreated.emit({\n        serverName: this.newServerName,\n        serverContent: this.newServerContent\n      });\n    }\n    onAddBlueprint() {\n      this.blueprintCreated.emit({\n        serverName: this.newServerName,\n        serverContent: this.newServerContent\n      });\n    }\n    static {\n      this.ɵfac = function CockpitComponent_Factory(t) {\n        return new (t || CockpitComponent)();\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: CockpitComponent,\n        selectors: [[\"app-cockpit\"]],\n        outputs: {\n          serverCreated: \"serverCreated\",\n          blueprintCreated: \"bpCreated\"\n        },\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 16,\n        vars: 1,\n        consts: [[\"serverNameInput\", \"\"], [1, \"row\"], [1, \"col-xs-12\"], [\"type\", \"text\", 1, \"form-control\"], [\"type\", \"text\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [1, \"btn\", \"btn-primary\", 3, \"click\"]],\n        template: function CockpitComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            const _r1 = i0.ɵɵgetCurrentView();\n            i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"p\");\n            i0.ɵɵtext(3, \"Add new Servers or blueprints!\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(4, \"label\");\n            i0.ɵɵtext(5, \"Server Name\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(6, \"input\", 3, 0);\n            i0.ɵɵelementStart(8, \"label\");\n            i0.ɵɵtext(9, \"Server Content\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(10, \"input\", 4);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function CockpitComponent_Template_input_ngModelChange_10_listener($event) {\n              i0.ɵɵrestoreView(_r1);\n              i0.ɵɵtwoWayBindingSet(ctx.newServerContent, $event) || (ctx.newServerContent = $event);\n              return i0.ɵɵresetView($event);\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(11, \"br\");\n            i0.ɵɵelementStart(12, \"button\", 5);\n            i0.ɵɵlistener(\"click\", function CockpitComponent_Template_button_click_12_listener() {\n              i0.ɵɵrestoreView(_r1);\n              const serverNameInput_r2 = i0.ɵɵreference(7);\n              return i0.ɵɵresetView(ctx.onAddServer(serverNameInput_r2));\n            });\n            i0.ɵɵtext(13, \"Add Server\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(14, \"button\", 5);\n            i0.ɵɵlistener(\"click\", function CockpitComponent_Template_button_click_14_listener() {\n              i0.ɵɵrestoreView(_r1);\n              return i0.ɵɵresetView(ctx.onAddBlueprint());\n            });\n            i0.ɵɵtext(15, \"Add Server Blueprint\");\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(10);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.newServerContent);\n          }\n        },\n        dependencies: [FormsModule, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgModel]\n      });\n    }\n  }\n  return CockpitComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}